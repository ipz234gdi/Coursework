document.addEventListener("DOMContentLoaded", function () {
  (function () {
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    let width = (canvas.width = window.innerWidth);
    let height = (canvas.height = window.innerHeight);

    window.addEventListener("resize", function () {
      const prevWidth = width;
      const prevHeight = height;

      // ‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ, –ü–û –°–¢–ê–†–ò–• –†–û–ó–ú–Ü–†–ê–•
      particles = particles.filter(
        (p) => p.x >= 0 && p.x <= prevWidth && p.y >= 0 && p.y <= prevHeight
      );

      // üéØ –ü–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
      width = canvas.width = window.innerWidth;
      height = canvas.height = window.innerHeight;

      // üß™ –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ
      const missing = config.particleCount - particles.length;
      for (let i = 0; i < missing; i++) {
        const x = rng() * width;
        const y = rng() * height;
        const angle = rng() * Math.PI * 2;
        const speed = config.particleSpeed * (0.5 + rng());
        const vx = Math.cos(angle) * speed;
        const vy = Math.sin(angle) * speed;
        particles.push(new Particle(x, y, vx, vy));
      }
    });

    // Seeded RNG (LCG) ‚Äì –¥–ª—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ—Å—Ç—ñ –≤—ñ–∑–µ—Ä—É–Ω–∫—É
    function createSeededRandom(seed) {
      const m = 0x80000000; // 2^31
      const a = 1103515245;
      const c = 12345;
      let state = parseInt(seed) || 12345;
      return function () {
        state = (a * state + c) % m;
        return state / m;
      };
    }

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
    const config = {
      particleCount: 350, // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—Ç–∏–Ω–æ–∫
      connectionDistance: 80, // –Ø–∫—â–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —á–∞—Å—Ç–∏–Ω–∫–∞–º–∏ –º–µ–Ω—à–∞ ‚Äì –º–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—é
      particleSpeed: 1.55, // –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É (–¥–æ–≤–æ–ª—ñ –ø–æ–≤—ñ–ª—å–Ω–æ)
      particleRadius: 2, // –†–∞–¥—ñ—É—Å —á–∞—Å—Ç–∏–Ω–∫–∏
      backgroundColor: "#0d0d0d", // –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É
      particleColor: "rgba(200,200,220,1)", // –ö–æ–ª—ñ—Ä —á–∞—Å—Ç–∏–Ω–æ–∫
      lineColor: "rgba(200,200,220,0.15)", // –ö–æ–ª—ñ—Ä –ª—ñ–Ω—ñ–π (–∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é)
    };

    // –ö–ª–∞—Å —á–∞—Å—Ç–∏–Ω–∫–∏ (–≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∫–∏ –∂–∏–≤—ñ –π –∑–∞–≤–∂–¥–∏ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ)
    class Particle {
      constructor(x, y, vx, vy) {
        this.x = x;
        this.y = y;
        this.vx = vx;
        this.vy = vy;
      }

      get xRatio() {
        return this.x / width;
      }

      get yRatio() {
        return this.y / height;
      }

      setFromRatios(xRatio, yRatio) {
        this.x = xRatio * width;
        this.y = yRatio * height;
      }

      update(dt) {
        this.x += this.vx * dt;
        this.y += this.vy * dt;
        if (this.x < 0) this.x += width;
        if (this.x > width) this.x -= width;
        if (this.y < 0) this.y += height;
        if (this.y > height) this.y -= height;
      }

      draw(ctx) {
        ctx.beginPath();
        ctx.arc(this.x, this.y, config.particleRadius, 0, Math.PI * 2);
        ctx.fillStyle = config.particleColor;
        ctx.fill();
      }
    }

    let particles = [];
    let rng;

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Å—Ç–∏–Ω–æ–∫ —ñ–∑ –∑–∞–¥–∞–Ω–∏–º seed
    function initParticles(seed) {
      particles = [];
      rng = createSeededRandom(seed);
      for (let i = 0; i < config.particleCount; i++) {
        const x = rng() * width;
        const y = rng() * height;
        // –ù–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫—É—Ç —Ä—É—Ö—É –∑ –≤–∞—Ä—ñ–∞—Ü—ñ—î—é —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        const angle = rng() * Math.PI * 2;
        const speed = config.particleSpeed * (0.5 + rng());
        const vx = Math.cos(angle) * speed;
        const vy = Math.sin(angle) * speed;
        particles.push(new Particle(x, y, vx, vy));
      }
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –≤—ñ–∑–µ—Ä—É–Ω–∫—É
    function draw() {
      ctx.fillStyle = config.backgroundColor;
      ctx.fillRect(0, 0, width, height);
      // –ú–∞–ª—é—î–º–æ –∑–≤‚Äô—è–∑–∫–∏ –º—ñ–∂ —á–∞—Å—Ç–∏–Ω–∫–∞–º–∏ (—è–∫—â–æ –≤–æ–Ω–∏ –¥–æ—Å–∏—Ç—å –±–ª–∏–∑—å–∫–æ)
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          let dx = particles[i].x - particles[j].x;
          let dy = particles[i].y - particles[j].y;
          let dist = Math.hypot(dx, dy);
          if (dist < config.connectionDistance) {
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.strokeStyle = config.lineColor;
            ctx.lineWidth = 1;
            ctx.stroke();
          }
        }
      }
      // –ú–∞–ª—é—î–º–æ —á–∞—Å—Ç–∏–Ω–∫–∏
      for (let p of particles) {
        p.draw(ctx);
      }
    }

    let lastTime = Date.now();
    function animate() {
      const now = Date.now();
      const dt = (now - lastTime) / 1000;
      lastTime = now;

      // üîÑ –û—á–∏—â–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–æ–∫ –∑–∞ –º–µ–∂–∞–º–∏
      particles = particles.filter(
        (p) => p.x >= 0 && p.x <= width && p.y >= 0 && p.y <= height
      );

      // ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ
      while (particles.length < config.particleCount) {
        const x = rng() * width;
        const y = rng() * height;
        const angle = rng() * Math.PI * 2;
        const speed = config.particleSpeed * (0.5 + rng());
        const vx = Math.cos(angle) * speed;
        const vy = Math.sin(angle) * speed;
        particles.push(new Particle(x, y, vx, vy));
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó —á–∞—Å—Ç–∏–Ω–æ–∫
      for (let p of particles) {
        p.update(dt);
      }

      draw();

      requestAnimationFrame(animate);
    }

    // –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è seed
    const seedInput = 12345;
    const resetBtn = document.getElementById("resetBtn");
    // resetBtn.addEventListener("click", function () {
    //   initParticles(seedInput.value);
    // });

    initParticles(seedInput);
    animate();
  })();
});
